{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anupc\\\\OneDrive\\\\Desktop\\\\edu\\\\Movies_Search\\\\myapp\\\\src\\\\context.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = `https://www.omdbapi.com/?apikey=e23eba27&s=godfather`;\nconst AppContext = /*#__PURE__*/React.createContext();\n\n//we need to create provider function\nconst AppProvider = ({\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isLoading, setIsLoading] = useState(true);\n  const [movie, setMovie] = useState([]);\n  const [isError, setIsError] = useState({\n    show: \"false\",\n    msg: \"\"\n  });\n  const getMovies = async url => {\n    _s();\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data);\n      if (data.Response === \"True\") {\n        setIsLoading(false);\n        setMovie(data.Search);\n      } else {\n        setIsError({\n          show: true,\n          msg: data.error\n        });\n      }\n      useEffect(() => {\n        console.log(movie);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  _s(getMovies, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  useEffect(() => {\n    getMovies(API_URL);\n  }, []);\n  //the app that we wrapped we cat get that data so we use children\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      isLoading,\n      isError,\n      movie\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 15\n  }, this);\n};\n\n//global context hooks (Alternative method)\n_s2(AppProvider, \"KDOIjAS4hZe5/nEsRjxNTnyyqJE=\");\n_c = AppProvider;\nconst useGlobalContext = () => {\n  _s3();\n  return useContext(AppContext);\n};\n_s3(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { AppContext, AppProvider, useGlobalContext };\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","jsxDEV","_jsxDEV","API_URL","AppContext","createContext","AppProvider","children","_s2","_s","$RefreshSig$","isLoading","setIsLoading","movie","setMovie","isError","setIsError","show","msg","getMovies","url","res","fetch","data","json","console","log","Response","Search","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s3","$RefreshReg$"],"sources":["C:/Users/anupc/OneDrive/Desktop/edu/Movies_Search/myapp/src/context.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nconst API_URL = `https://www.omdbapi.com/?apikey=e23eba27&s=godfather`;\r\nconst AppContext =  React.createContext();\r\n\r\n//we need to create provider function\r\nconst AppProvider = ({children}) => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [movie, setMovie] = useState([]);\r\n    const [isError, setIsError] = useState({show:\"false\", msg:\"\"});\r\n    const getMovies = async (url) => {\r\n        try{\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            console.log(data);\r\n           \r\n            if(data.Response === \"True\"){\r\n                setIsLoading(false);\r\n                setMovie(data.Search);\r\n                \r\n                \r\n            }\r\n           \r\n            else{\r\n              setIsError({\r\n                show:true,\r\n                msg: data.error,\r\n              })\r\n            }\r\n            useEffect(() => {\r\n                console.log(movie);\r\n            })\r\n            \r\n        } \r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getMovies(API_URL);\r\n    },[]);\r\n    //the app that we wrapped we cat get that data so we use children\r\n        return<AppContext.Provider value={{isLoading, isError, movie}}>\r\n            {children}\r\n        </AppContext.Provider>\r\n}\r\n\r\n//global context hooks (Alternative method)\r\nconst useGlobalContext  = () => {\r\n    return useContext(AppContext);\r\n}\r\nexport {AppContext, AppProvider, useGlobalContext};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,OAAO,GAAI,sDAAqD;AACtE,MAAMC,UAAU,gBAAIP,KAAK,CAACQ,aAAa,CAAC,CAAC;;AAEzC;AACA,MAAMC,WAAW,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC;IAACiB,IAAI,EAAC,OAAO;IAAEC,GAAG,EAAC;EAAE,CAAC,CAAC;EAC9D,MAAMC,SAAS,GAAG,MAAOC,GAAG,IAAK;IAAAX,EAAA;IAC7B,IAAG;MACC,MAAMY,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC5B,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MAEjB,IAAGA,IAAI,CAACI,QAAQ,KAAK,MAAM,EAAC;QACxBf,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACS,IAAI,CAACK,MAAM,CAAC;MAGzB,CAAC,MAEG;QACFZ,UAAU,CAAC;UACTC,IAAI,EAAC,IAAI;UACTC,GAAG,EAAEK,IAAI,CAACM;QACZ,CAAC,CAAC;MACJ;MACA9B,SAAS,CAAC,MAAM;QACZ0B,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;MACtB,CAAC,CAAC;IAEN,CAAC,CACD,OAAMgB,KAAK,EAAC;MACRJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB;EACJ,CAAC;EAAApB,EAAA,CA3BKU,SAAS;EA4BfpB,SAAS,CAAC,MAAM;IACZoB,SAAS,CAAChB,OAAO,CAAC;EACtB,CAAC,EAAC,EAAE,CAAC;EACL;EACI,oBAAMD,OAAA,CAACE,UAAU,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAACpB,SAAS;MAAEI,OAAO;MAAEF;IAAK,CAAE;IAAAN,QAAA,EACzDA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAC9B,CAAC;;AAED;AAAA3B,GAAA,CAzCMF,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AA0CjB,MAAM+B,gBAAgB,GAAIA,CAAA,KAAM;EAAAC,GAAA;EAC5B,OAAOxC,UAAU,CAACM,UAAU,CAAC;AACjC,CAAC;AAAAkC,GAAA,CAFKD,gBAAgB;AAGtB,SAAQjC,UAAU,EAAEE,WAAW,EAAE+B,gBAAgB;AAAE,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}